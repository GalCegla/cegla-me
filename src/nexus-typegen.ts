/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./schema/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * DateTime custom scalar type
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * DateTime custom scalar type
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PostCreateInput: { // input type
    body: string; // String!
    rating: NexusGenEnums['Rating']; // Rating!
    shop: NexusGenInputs['ShopConnectNestedOne']; // ShopConnectNestedOne!
    subtitle: string; // String!
    thumbnail: string; // String!
    title: string; // String!
  }
  PostOrderByInput: { // input type
    createdAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
    title?: NexusGenEnums['SortOrder'] | null; // SortOrder
    updatedAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  PostUpdateInput: { // input type
    body?: string | null; // String
    rating?: NexusGenEnums['Rating'] | null; // Rating
    shop?: NexusGenInputs['ShopConnectNestedOne'] | null; // ShopConnectNestedOne
    subtitle?: string | null; // String
    thumbnail?: string | null; // String
    title?: string | null; // String
  }
  PostWhereUniqueInput: { // input type
    id: string; // String!
  }
  ShopConnectNestedOne: { // input type
    connect: NexusGenInputs['ShopWhereUniqueInput']; // ShopWhereUniqueInput!
  }
  ShopCreateInput: { // input type
    name: string; // String!
  }
  ShopUpdateInput: { // input type
    name?: string | null; // String
  }
  ShopWhereUniqueInput: { // input type
    id: string; // String!
  }
}

export interface NexusGenEnums {
  Rating: "BAD" | "GOOD" | "OK"
  SortOrder: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {};
  Post: { // root type
    body: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    rating: NexusGenEnums['Rating']; // Rating!
    shopId: string; // String!
    subtitle: string; // String!
    thumbnail?: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  Shop: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createOnePost: NexusGenRootTypes['Post']; // Post!
    createOneShop: NexusGenRootTypes['Shop']; // Shop!
    deleteOneShop: NexusGenRootTypes['Shop']; // Shop!
    updateOnePost: NexusGenRootTypes['Post']; // Post!
    updateOneShop: NexusGenRootTypes['Shop']; // Shop!
  }
  Post: { // field return type
    body: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    rating: NexusGenEnums['Rating']; // Rating!
    shop: NexusGenRootTypes['Shop']; // Shop!
    shopId: string; // String!
    subtitle: string; // String!
    thumbnail: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    post: NexusGenRootTypes['Post'] | null; // Post
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
    shop: NexusGenRootTypes['Shop'] | null; // Shop
    shops: NexusGenRootTypes['Shop'][]; // [Shop!]!
  }
  Shop: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    name: string; // String!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createOnePost: 'Post'
    createOneShop: 'Shop'
    deleteOneShop: 'Shop'
    updateOnePost: 'Post'
    updateOneShop: 'Shop'
  }
  Post: { // field return type name
    body: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    rating: 'Rating'
    shop: 'Shop'
    shopId: 'String'
    subtitle: 'String'
    thumbnail: 'String'
    title: 'String'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    post: 'Post'
    posts: 'Post'
    shop: 'Shop'
    shops: 'Shop'
  }
  Shop: { // field return type name
    createdAt: 'DateTime'
    id: 'ID'
    name: 'String'
    posts: 'Post'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOnePost: { // args
      data: NexusGenInputs['PostCreateInput']; // PostCreateInput!
    }
    createOneShop: { // args
      data: NexusGenInputs['ShopCreateInput']; // ShopCreateInput!
    }
    deleteOneShop: { // args
      where: NexusGenInputs['ShopWhereUniqueInput']; // ShopWhereUniqueInput!
    }
    updateOnePost: { // args
      data: NexusGenInputs['PostUpdateInput']; // PostUpdateInput!
      where: NexusGenInputs['PostWhereUniqueInput']; // PostWhereUniqueInput!
    }
    updateOneShop: { // args
      data: NexusGenInputs['ShopUpdateInput']; // ShopUpdateInput!
      where: NexusGenInputs['ShopWhereUniqueInput']; // ShopWhereUniqueInput!
    }
  }
  Query: {
    post: { // args
      where: NexusGenInputs['PostWhereUniqueInput']; // PostWhereUniqueInput!
    }
    posts: { // args
      orderBy?: NexusGenInputs['PostOrderByInput'] | null; // PostOrderByInput
    }
    shop: { // args
      where: NexusGenInputs['ShopWhereUniqueInput']; // ShopWhereUniqueInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}