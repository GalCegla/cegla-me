### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumRatingFieldUpdateOperationsInput {
  set: Rating
}

input EnumRatingFilter {
  equals: Rating
  in: [Rating!]
  not: NestedEnumRatingFilter
  notIn: [Rating!]
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  createOneShop(data: ShopCreateInput!): Shop!
  deleteOneShop(where: ShopWhereUniqueInput!): Shop
  updateOneShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumRatingFilter {
  equals: Rating
  in: [Rating!]
  not: NestedEnumRatingFilter
  notIn: [Rating!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Post {
  body: String!
  createdAt: DateTime!
  id: String!
  shop: Shop!
  shopId: String!
  subtitle: String!
  title: String!
  updatedAt: DateTime!
}

input PostCreateInput {
  body: String!

  """The shop about which the post is about"""
  shop: ShopConnectNestedOne!
  subtitle: String!
  title: String!
}

input PostCreateManyShopInput {
  body: String!
  createdAt: DateTime
  id: String
  rating: Rating!
  subtitle: String!
  title: String!
  updatedAt: DateTime
}

input PostCreateManyShopInputEnvelope {
  data: [PostCreateManyShopInput!]
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutShopInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutShopInput!]
  create: [PostCreateWithoutShopInput!]
  createMany: PostCreateManyShopInputEnvelope
}

input PostCreateOrConnectWithoutShopInput {
  create: PostCreateWithoutShopInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutShopInput {
  body: String!
  createdAt: DateTime
  id: String
  rating: Rating!
  subtitle: String!
  title: String!
  updatedAt: DateTime
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  body: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  rating: EnumRatingFilter
  shopId: StringFilter
  subtitle: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostUpdateManyMutationInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: EnumRatingFieldUpdateOperationsInput
  subtitle: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutShopInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutShopInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutShopInput!]
  create: [PostCreateWithoutShopInput!]
  createMany: PostCreateManyShopInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutShopInput!]
  updateMany: [PostUpdateManyWithWhereWithoutShopInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutShopInput!]
}

input PostUpdateWithWhereUniqueWithoutShopInput {
  data: PostUpdateWithoutShopInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutShopInput {
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating: EnumRatingFieldUpdateOperationsInput
  subtitle: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutShopInput {
  create: PostCreateWithoutShopInput!
  update: PostUpdateWithoutShopInput!
  where: PostWhereUniqueInput!
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(after: ShopWhereUniqueInput, before: ShopWhereUniqueInput, first: Int, last: Int): [Shop!]!
}

enum QueryMode {
  default
  insensitive
}

enum Rating {
  BAD
  GOOD
  OK
}

type Shop {
  createdAt: DateTime!
  id: String!
  name: String!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int): [Post!]!
  updatedAt: DateTime!
}

input ShopConnectNestedOne {
  connect: ShopWhereUniqueInput!
}

input ShopCreateInput {
  createdAt: DateTime
  id: String
  name: String!
  posts: PostCreateNestedManyWithoutShopInput
  updatedAt: DateTime
}

input ShopUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutShopInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ShopWhereUniqueInput {
  id: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
